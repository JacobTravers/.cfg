# Kakoune with Kakhis
# Author: Jacob Travers

# Plugin manager
source "~/.config/kak/plugins/plug.kak/rc/plug.kak"
plug "andreyorst/plug.kak" noload

# kakoune.cr (coderunner)
evaluate-commands %sh{
    kcr init kakoune
}


################### DISPLAY  ################### 

# Kill clippy, he takes precious real-estate
set-option global ui_options ncurses_assistant=off

# Min visible surrounding rows / columns 
set-option global scrolloff 1,3

plug "caksoylar/kakoune-mysticaltutor" theme %{ colorscheme mysticaltutor-trans }

# modeline using starship.rs
plug "eburghar/kakship" do %{
	cargo install --force --path . --root ~/.local
	[ ! -e $kak_config/starship.toml ] && cp starship.toml $kak_config/
} config %{
	kakship-enable
}

# Relative line numbers toggled on insert
plug "evanrelf/number-toggle.kak" config %{
	require-module "number-toggle"
}

# Rainbow delimiters + current scope
plug "crizan/kak-rainbower" %{
	hook global WinCreate .* %{ rainbow-enable-window }
}

# Display colors inline
plug "alexherbo2/palette.kak" %{
    require-module palette
	palette-enable
}


############### FORMATTING/LINTING ############### 

# Tab definitions
set-option global tabstop 4
set-option global indentwidth 4

# Use space for tabs and alignments
plug "andreyorst/smarttab.kak" defer smarttab %{
} config %{
    hook global WinSetOption filetype=(?!makefile)(?!snippet).* %{
        expandtab
        set-option window softtabstop %opt{indentwidth}
        hook window WinSetOption indentwidth=([0-9]+) %{
            set-option window softtabstop %val{hook_param_capture_1}
        }
    }
    hook global WinSetOption filetype=(makefile|snippet) noexpandtab
}

# LSP Magic
plug "kak-lsp/kak-lsp" do %{
    cargo build --release --locked
    cargo install --force --path .
} config %{

    # uncomment to enable debugging
    # eval %sh{echo ${kak_opt_lsp_cmd} >> /tmp/kak-lsp.log}
    # set global lsp_cmd "kak-lsp -s %val{session} -vvv --log /tmp/kak-lsp.log"

    set global lsp_diagnostic_line_error_sign '║'
    set global lsp_diagnostic_line_warning_sign '┊'

    define-command lsp-restart -docstring 'restart lsp server' %{ lsp-stop; lsp-start }
    hook global WinSetOption filetype=(python|rust|javascript|typescript|html|css|sass|json|yaml|sql) %{
        set-option window lsp_auto_highlight_references true
        set-option window lsp_hover_anchor false
        lsp-auto-hover-enable
        echo -debug "Enabling LSP for filtetype %opt{filetype}"
        lsp-enable-window
    }

    hook global WinSetOption filetype=(rust) %{
        set window lsp_server_configuration rust.clippy_preference="on"
    }

    hook global WinSetOption filetype=rust %{
        hook window BufWritePre .* %{
            evaluate-commands %sh{
                test -f rustfmt.toml && printf lsp-formatting-sync
            }
        }
    }

    hook global KakEnd .* lsp-exit
}

# Emmet completions using npm emmet-cli
define-command emmet %{
    execute-keys "giGl| emmet <ret>" 
}

# Development mode (linting and formating)
declare-user-mode dev
    map global dev f  -docstring "format"         ':format<ret>'
    map global dev l  -docstring "lint"           ':lint<ret>'
    map global dev j  -docstring "next lint"      ':next-lint-message<ret>'
    map global dev k  -docstring "previous lint"  ':previous-lint-message<ret>'

    hook global WinSetOption filetype=(javascript|html) %{
        map global dev e -docstring "emmet" ':emmet<ret>'
    }

# JS/TS formatting and linting with eslint, tslint, prettier
plug "schemar/kak-jsts" config %{
    hook global WinSetOption filetype=(javascript|html|css|sass|scss) %{
        lint-buffer
        map buffer dev f -docstring "format"  ':format-prettier<ret>'
        map buffer dev l -docstring "lint"    ':lint<ret>'
        # format-eslint also an option
    }
    hook global WinSetOption filetype=(typescript) %{
        lint-buffer
        map buffer dev f -docstring "format"  ':format-tslint<ret>'
        map buffer dev l -docstring "lint"    ':lint<ret>'
    }
}


###################### UTILITY ###################### 

# Auto-insert pairs
plug "alexherbo2/auto-pairs.kak" %{
    require-module auto-pairs
    auto-pairs-enable
}

# Clipboard integration
plug "lePerdu/kakboard" %{
    hook global WinCreate .* %{ kakboard-enable }
}

# Use ripgrep instead of grep
set global grepcmd 'rg -n'

# Read with ansi colors
plug "eraserhd/kak-ansi" do %{
    make
}

plug "occivink/kakoune-sudo-write"

# Alacritty integration
plug "alexherbo2/alacritty.kak" %{
    require-module alacritty
    alias global terminal alacritty-terminal
    alias global popup alacritty-terminal-popup
}

hook global WinSetOption filetype=(man) %{
    set-option buffer readonly
    map buffer normal u <c-u>
    map buffer normal d <c-d>
}


###################### NORMAL MODE ###################### 


##########REMAPPINGS

map global normal <space> , -docstring "leader-key"

map global normal q b -docstring "select previous word"
map global normal Q B -docstring "extend previous word"
map global normal <a-q> <a-b> -docstring "select previous BIG-WORD"
map global normal <a-Q> <a-B> -docstring "extend prevous BIG-WORD"

map global normal ^ q     -docstring "start macro"
map global normal <a-^> Q -docstring "end macro"

map global normal <esc> <space> -docstring "deselect all but current selection"

#########AUGMENTATION

map global normal <c-q> -docstring "quit"  ':q<ret>'

# Select/add next match
define-command -hidden select-prev-of-sel %{
    try %{
        execute-keys "<a-k>\A.\z<ret>"
        execute-keys -save-regs '' "_<a-i>*"
    } catch %{
        execute-keys -save-regs '' "_*<a-n>"
    } catch nop
}
define-command -hidden add-next-of-sel %{
    try %{
        execute-keys "<a-k>\A.\z<ret>"
        execute-keys -save-regs '' "_<a-i>w*"
    } catch %{
        execute-keys -save-regs '' "_*<s-n>"
    } catch nop
}
define-command -hidden select-next-of-sel %{
    try %{
        execute-keys "<a-k>\A.\z<ret>"
        execute-keys -save-regs '' "_<a-i>w*"
    } catch %{
        execute-keys -save-regs '' "_*<n>"
    } catch nop
}
map global normal v           -docstring "select next match"      ':select-next-of-sel<ret>'
map global normal <a-V>       -docstring "select previous match"  ':select-prev-of-sel<ret>'
map global normal V           -docstring "add next match"         ':add-next-of-sel<ret>'
map global normal <a-percent> -docstring "select all matches"     '*%s<ret>)'

map global normal <a-v> <a-space> -docstring "deselect current sel"

# paste in insert mode
define-command -hidden insert-paste %{
        execute-keys "<esc>;Pi"
}
map global insert <c-v> -docstring "insert mode paste" '<esc>:insert-paste<ret>'

# (un)Comment Lines
define-command comment %{
    try %{
        execute-keys _
        comment-block
    } catch comment-line
}
map -docstring "comment" global normal <#> %{:comment<ret>}

# Better match function
plug "useredsa/dynamic-matching.kak" %{
    dynamic-matching-dmatch-conf
    map global normal m -docstring "select dynamic match"  ':enter-user-mode dmatch<ret>'
    map global normal M -docstring "add dynamic match"     ':enter-user-mode Dmatch<ret>'
}

# Kakoune.cr (coderunner) implementations
map global normal <c-t> -docstring "New client"    ':new<ret>'
map global normal <c-n> -docstring "New terminal"  ':connect-terminal<ret>'
map global normal +     -docstring "New popup"     ':connect-popup<ret>'
map global normal <c-s> -docstring "Open buffers"  ':+ kcr-fzf-buffers<ret>'
map global normal <c-g> -docstring "Open files"    ':+ kcr-fzf-files<ret>'
map global normal <c-/> -docstring "Find files by content"  ':+ kcr-fzf-grep<ret>'

map global normal <c-e> -docstring "Open Broot"  ':> broot<ret>'
map global normal <c-l> -docstring "Open Lazygit"  ':> lazygit<ret>'


################# MODES ##################

# Space(x2) for prompt
map global user <space> -docstring "commander" :

# Plugin manager
map global user = -docstring "buttplug" ':plug-list<ret>'

# Navigate buffers
plug "delapouite/kakoune-buffers" %{
    hook global WinDisplay .* info-buffers
        map global normal b ":enter-buffers-mode<ret>"
        alias global bd delete-buffer
        alias global bf buffer-first
        alias global bl buffer-last
        alias global bo buffer-only
        alias global bo! buffer-only-force
}

map global user d -docstring "dev"  ':enter-user-mode dev<ret>'

# Useful fzf tools or 'skim' in my case
plug "andreyorst/fzf.kak" config %{
    map global user f -docstring "fzf"  ':fzf-mode<ret>'
} defer fzf %{
    set-option global fzf_implementation 'sk' 
    set-option global fzf_highlight_command 'bat'
    require-module fzf-file
    set-option global fzf_file_command 'fd'
}

# script for incrementing and decrementing
source "~/.config/kak/inc-dec.kak"
map global user i -docstring "inc-dec"  ':inc-dec-modify-numbers '

map global user k -docstring "kakboard"  ':kakboard-toggle <ret>' 

map global user l -docstring "LSP" %{:enter-user-mode lsp<ret>}

# Dynamic match mode
map global user m  -docstring "dmatch"  ':enter-user-mode -lock dmatch<ret>'

# Edit/extend/trim selections one by one
plug "occivink/kakoune-phantom-selection" %{
    declare-user-mode phantom
    map global user p -docstring "phantom"      ':enter-user-mode phantom<ret>'
    map global phantom a -docstring "Add"       ':phantom-selection-add-selection<ret>'
    map global phantom c -docstring "Clear"     ':phantom-selection-select-all; phantom-selection-clear<ret>'
    map global phantom n -docstring "Next"      ':phantom-selection-iterate-next<ret>'
    map global phantom p -docstring "Previous"  ':phantom-selection-iterate-prev<ret>'
}

# Select/edit surrounding chars and tags
plug "h-youhei/kakoune-surround"
	declare-user-mode surround
    map global normal <'> ":enter-user-mode surround<ret>" 
	map global surround i -docstring "insert"             ':surround<ret>' 
	map global surround d -docstring "delete"             ':delete-surround<ret>' 
	map global surround r -docstring "replace"            ':change-surround<ret>' 
	map global surround s -docstring "select"             ':select-surround<ret>' 
	map global surround I -docstring "surround with tag"  ':surround-with-tag<ret>' 
	map global surround D -docstring "delete tag"         ':delete-surrounding-tag<ret>' 
	map global surround R -docstring "replace tag"        ':change-surrounding-tag<ret>' 
	map global surround S -docstring "select tag"         ':select-surrounding-tag<ret>' 

# Splits using objects
plug 'alexherbo2/split-object.kak' %{
    map -docstring "split-object" global user s ':enter-user-mode split-object<ret>'
}

# Spelling and grammar checking
declare-user-mode spell
    map global user  S -docstring "spell" 	 ':enter-user-mode -lock spell<ret>'
    map global spell a -docstring "add" 	 ':spell-add<ret>'
    map global spell c -docstring "clear"    ':spell-clear<ret>'
    map global spell e -docstring "enable"   ':spell-enable<ret>'
    map global spell n -docstring "next"     ':spell-next<ret>'
    map global spell r -docstring "replace"  ':spell-replace<ret>'
    declare-option str language en-US
    define-command spell-enable %{
        hook window BufWritePost .* %{
            spell %opt{language}
        }
    }

# Tree-sitter syntax parsing and functionality
plug "ul/kak-tree" %{
    declare-user-mode tree
    map global user t -docstring "tree sitter"  ':enter-user-mode tree<ret>'
    map global tree t -docstring "syntax tree"  ':tree-node-sexp<ret>'
    map global tree c -docstring "children"     ':tree-select-children<ret>'
    map global tree h -docstring "parent"       ':tree-select-parent-node<ret>'
    map global tree j -docstring "next"         ':tree-select-next-node<ret>'
    map global tree k -docstring "previous"     ':tree-select-previous-node<ret>'
    map global tree l -docstring "first child"  ':tree-select-first-child<ret>'
    map global tree . -docstring "lock"         ':enter-user-mode -lock tree<ret>'
}

# scrub duplicate lines
define-command runiq %{
    execute-keys "|runiq -<ret>" 
}
map global user u -docstring "uniq" ':runiq<ret>'

# (un)Wrap lines
map global user w -docstring "wrap"    ':add-highlighter global/ wrap -word -indent<ret>'
map global user W -docstring "unwrap"  ':remove-highlighter global/wrap_-word_-indent<ret>'

#FIXME: broken with kcr, waiting for fix
# Clipboard history
# plug "alexherbo2/yank-ring.kak" %{
#     require-module yank-ring
#     require-module yank-ring-connect
#     yank-ring-enable
#     map global user y -docstring "yank ring" ':yank-ring<ret>' 
# }

