# Kakoune with Kakhis
# A bootstrapping config for kakoune meant
# as a starting point or inspiration
# to get you up and running ASAP

# Author: Jacob Travers

# kakoune.cr (coderunner)
evaluate-commands %sh{
    kcr init kakoune
} 

# Plugin manager
source "~/.config/kak/plugins/plug.kak/rc/plug.kak"
plug "andreyorst/plug.kak" noload



################### DISPLAY  ################### 

# Kill clippy, he takes precious real-estate
set-option global ui_options ncurses_assistant=off

# Min visible surrounding rows / columns 
set-option global scrolloff 1,3

# Colorschemes with opacities
plug "caksoylar/kakoune-mysticaltutor" theme %{ colorscheme mysticaltutor }

# Powerline like nvim, spacemacs
plug "andreyorst/powerline.kak" defer powerline %{
    set-option global powerline_ignore_warnings true
        powerline-separator global curve
} config %{
    powerline-start
}

# Powerline theme matching colorscheme
plug "jordan-yee/kakoune-mysticaltutor-powerline" defer powerline_mysticaltutor %{
    powerline-theme mysticaltutor
}

# Relative line numbers toggled on insert
plug "evanrelf/number-toggle.kak" config %{
	require-module "number-toggle"
}

# Rainbow delimiters + current scope
plug "crizan/kak-rainbower" %{
	hook global WinCreate .* %{ rainbow-enable-window }
}



############### FORMATTING/LINTING ############### 

# Tab definitions
set-option global tabstop 4
set-option global indentwidth 4

# Use space for tabs and alignments
plug "andreyorst/smarttab.kak" defer smarttab %{
} config %{
    hook global WinSetOption filetype=(?!makefile)(?!snippet).* %{
        expandtab
        set-option window softtabstop %opt{indentwidth}
        hook window WinSetOption indentwidth=([0-9]+) %{
            set-option window softtabstop %val{hook_param_capture_1}
        }
    }
    hook global WinSetOption filetype=(makefile|snippet) noexpandtab
}

# LSP Magic
plug "kak-lsp/kak-lsp" do %{ cargo install --locked --force --path . }
    hook global WinSetOption filetype=(python|javascript|typescript|html|css|bash) %{lsp-enable-window}

# JS/TS formatting and linting with eslint, tslint, prettier
plug "schemar/kak-jsts" config %{
    hook global WinSetOption filetype=(javascript) %{
        map window dev l -docstring 'lint' ': lint<ret>'
        map window dev f -docstring 'format' ': format-prettier<ret>'
        # format-eslint also an option
    }
    hook global WinSetOption filetype=(typescript) %{
        map window dev l -docstring 'lint' ': lint<ret>'
        map window dev f -docstring 'format' ': format-tslint<ret>'
    }
}

# Emmet completions
plug 'jjk96/kakoune-emmet' %{
    hook global WinSetOption filetype=(xml|html|sass|css) %{
        emmet-enable-autocomplete
    }
}



###################### UTILITY ###################### 

# Clipboard integration
plug "lePerdu/kakboard" %{
    hook global WinCreate .* %{ kakboard-enable }
    map global normal <c-k> -docstring "toggle kakboard" 
}

# Alacritty integration
plug "alexherbo2/alacritty.kak" %{
    hook global ModuleLoaded spectrwm %{
        alias global terminal alacritty-terminal
        alias global popup alacritty-terminal-popup
    }
}

# Use ripgrep instead of grep
set global grepcmd 'rg -n'

# Auto-insert pairs
# plug "alexherbo2/auto-pairs.kak" %{
#     auto-pairs-enable
# }

# Pass to kak with ansi colors
plug "eraserhd/kak-ansi" do %{
    make
}

# Additional plugins
plug "delapouite/kakoune-palette"
plug "occivink/kakoune-sudo-write"



###################### NORMAL MODE ###################### 


##########REMAPPINGS

# Spacebar as leader-key
map global normal <space> ,

# q is 'word-beginning'
map global normal q b
map global normal Q B
map global normal <a-q> <a-b>
map global normal <a-Q> <a-B>

# ^ is macro key
map global normal ^ q
map global normal <a-^> Q

# Remove multi-selections
map global normal <esc> <space>
map global normal <a-v> <a-space>


#########AUGMENTATION

# Select/add next match
define-command -hidden select-or-add-cursor %{
    try %{
        execute-keys "<a-k>\A.\z<ret>"
        execute-keys -save-regs '' "_<a-i>w*"
    } catch %{
        execute-keys -save-regs '' "_*<s-n>"
    } catch nop
}
map -docstring 'add next match' global normal v ":select-or-add-cursor<ret>"

### TODO: Select/add previous match ###

# (un)Comment Lines
define-command comment %{
    try %{
        execute-keys _
        comment-block
    } catch comment-line
}
map -docstring 'comment' global normal <#> %{: comment<ret>}

# Better match function
plug "useredsa/dynamic-matching.kak" %{
    dynamic-matching-dmatch-conf
    map -docstring 'select dynamic match' global normal m ": enter-user-mode dmatch<ret>"
    map -docstring 'add dynamic match'    global normal M ": enter-user-mode Dmatch<ret>"
}

# Kakoune.cr (coderunner) implementations
map -docstring 'New client'   global normal <c-t> ": new<ret>"
map -docstring 'New terminal' global normal <c-n> ": connect-terminal<ret>"
map -docstring 'New popup'    global normal +     ": connect-popup<ret>"

map -docstring 'Open buffers' global normal <c-r> ": + kcr-fzf-buffers<ret>"
map -docstring 'Open files'   global normal <c-v> ": + kcr-fzf-files<ret>"
map -docstring 'Open files by content' global normal <c-/> ": + kcr-fzf-grep<ret>"

# map -docstring 'Open Broot' global normal <c-e> ": > broot<ret>"
# map -docstring 'Open Gitui' global normal <c-g> ": + gitui<ret>"


################# MODES ##################

# Double tap space for cmdline
map -docstring 'commander' global user <space> :

# Plugin manager
map -docstring 'buttplug' global user = ": plug-list<ret>"

# Navigate buffers
plug "delapouite/kakoune-buffers" %{
    hook global WinDisplay .* info-buffers
        map global normal b ": enter-buffers-mode<ret>"
        alias global bd delete-buffer
        alias global bf buffer-first
        alias global bl buffer-last
        alias global bo buffer-only
        alias global bo! buffer-only-force
}

# Ctags/tagbar config
plug "andreyorst/tagbar.kak" defer "tagbar" %{
    set-option global tagbar_sort false
    set-option global tagbar_size 40
    set-option global tagbar_display_anon false
} config %{
    # if you have wrap highlighter enabled in you configuration
    # files it's better to turn it off for tagbar, using this hook:
    hook global WinSetOption filetype=tagbar %{
        remove-highlighter window/wrap window/number-lines
        # you can also disable rendering whitespaces here, line numbers, and
        # matching characters
    }
}

# Ctags interaction mode (WIP)
declare-user-mode ctags
    map global user c -docstring   'ctags'       ": enter-user-mode ctags<ret>"
    map global ctags t  -docstring 'tagbar'      ": tagbar-enable<ret>"
    map global ctags f  -docstring 'func info'   ": ctags-funcinfo<ret>"
    map global ctags g  -docstring 'generate'    ": ctags-generate<ret>"
    map global ctags s  -docstring 'search'      ": ctags-search<ret>"
    map global ctags u  -docstring 'update tags' ": ctags-update-tags<ret>"


# Development mode (linting and formating)
declare-user-mode dev
    map global user d -docstring 'dev'    ": enter-user-mode dev<ret>"
    map global dev l  -docstring 'lint'   ": lint<ret>"
    map global dev f  -docstring 'format' ": format<ret>"

# Useful fzf tools or 'skim' in my case
plug "andreyorst/fzf.kak" config %{
    map global user f -docstring 'fzf' ": fzf-mode<ret>"
} defer fzf %{
    set-option global fzf_implementation 'sk' 
    set-option global fzf_highlight_command 'bat'
    set-option global fzf_file_command 'fd'
}

# LSP-mode
map global user l %{: enter-user-mode lsp<ret>} -docstring "LSP"

# Dynamic match mode
map global user   m ': enter-user-mode -lock dmatch<ret>' -docstring "dmatch"

# Edit/extend/trim selections one by one
plug "occivink/kakoune-phantom-selection" %{
    declare-user-mode phantom-selection
    map global user p -docstring 'phantom'               ": enter-user-mode phantom-selection<ret>"
    map global phantom-selection a -docstring 'Add'      ": phantom-selection-add-selection<ret>"
    map global phantom-selection c -docstring 'Clear'    ": phantom-selection-select-all; phantom-selection-clear<ret>"
    map global phantom-selection n -docstring 'Next'     ": phantom-selection-iterate-next<ret>"
    map global phantom-selection p -docstring 'Previous' ": phantom-selection-iterate-prev<ret>"
}

# Select/edit surrounding chars and tags
plug "h-youhei/kakoune-surround"
	declare-user-mode surround
    map global normal <'> ": enter-user-mode surround<ret>" 
	map global surround r -docstring 'replace surround'        ": change-surround<ret>" 
	map global surround d -docstring 'delete surround'         ": delete-surround<ret>" 
	map global surround s -docstring 'select surround'         ": select-surround<ret>" 
	map global surround i -docstring 'surround'                ": surround<ret>" 
	map global surround D -docstring 'delete surrounding tag'  ": delete-surrounding-tag<ret>" 
	map global surround R -docstring 'replace surrounding tag' ": change-surrounding-tag<ret>" 
	map global surround S -docstring 'select surrounding tag'  ": select-surrounding-tag<ret>" 
	map global surround I -docstring 'surround with tag'       ": surround-with-tag<ret>" 

# Splits using objects
plug 'alexherbo2/split-object.kak' %{
    map -docstring 'split-object' global user s ": enter-user-mode split-object<ret>"
}

# Spelling and grammar checking
declare-user-mode spell
    map global user  S -docstring 'spell' 	": enter-user-mode -lock spell<ret>"
    map global spell a -docstring 'add' 	": spell-add<ret>"
    map global spell c -docstring 'clear'   ": spell-clear<ret>"
    map global spell e -docstring 'enable'  ": spell-enable<ret>"
    map global spell n -docstring 'next'    ": spell-next<ret>"
    map global spell r -docstring 'replace' ": spell-replace<ret>"
    declare-option str language en-US
    define-command spell-enable %{
        hook window BufWritePost .* %{
            spell %opt{language}
        }
    }

# Tree-sitter
plug "ul/kak-tree" %{
    declare-user-mode tree
    map global user t -docstring 'tree sitter' ": enter-user-mode tree<ret>"
    map global tree c -docstring 'children'    ": tree-select-children<ret>"
    map global tree f -docstring 'first child' ": tree-select-first-child<ret>"
    map global tree n -docstring 'next'        ": tree-select-next-node<ret>"
    map global tree p -docstring 'previous'    ": tree-select-previous-node<ret>"
    map global tree t -docstring 'syntax tree' ": tree-node-sexp<ret>"
    map global tree u -docstring 'parent'      ": tree-select-parent-node<ret>"
    map global tree . -docstring 'lock'        ": enter-user-mode -lock tree<ret>"
}

# (un)Wrap lines
map -docstring 'wrap'   global user w ": add-highlighter global/ wrap -word -indent<ret>"
map -docstring 'unwrap' global user W ": remove-highlighter global/wrap_-word_-indent<ret>"

# Clipboard history
plug "alexherbo2/yank-ring.kak" %{
    require-module yank-ring
    require-module yank-ring-connect
    yank-ring-enable
    map global user y -docstring 'yank ring' ": yank-ring<ret>" 
}
