# Kakoune with Kakhis
# A bootstrapping config for kakoune meant
# as a starting point or inspiration
# to get you up and running ASAP

# Author: Jacob Travers

# Plugin manager
source "~/.config/kak/plugins/plug.kak/rc/plug.kak"
plug "andreyorst/plug.kak" noload

############### DISPLAY  ############### 

# Kill clippy, he takes precious real-estate
set-option global ui_options ncurses_assistant=off

# Min surrounding rows / columns 
set-option global scrolloff 1,3

# FIXME: Highlight trailing whitespace
add-highlighter global/ regex \h+$ 0:Error
add-highlighter global/ show-matching

# relative line numbers toggled on insert
plug "evanrelf/number-toggle.kak" config %{
	require-module "number-toggle"
}

# Colorscheme with opacities (syntax HLs under selection HLs)
plug "caksoylar/kakoune-mysticaltutor" theme %{ colorscheme mysticaltutor }

# Matching powerline theme
plug "jordan-yee/kakoune-mysticaltutor-powerline"

# Powerline like nvim, spacemacs
plug "andreyorst/powerline.kak" defer powerline %{
	powerline-separator curve
  powerline-theme mysticaltutor
} config %{
  powerline-start
}

########## FORMATTING/LINTING ######### 

set-option global tabstop 2
set-option global indentwidth 2

plug "kak-lsp/kak-lsp" do %{cargo install --locked --force --path .}
  hook global WinSetOption filetype=(python|javascript|typescript|html|css|bash) %{lsp-enable-window}

define-command -hidden prettier-format %{
    execute-keys '%|npx prettier --stdin-filepath $kak_buffile<ret><space>;'
}

############### MISC  ############### 

# Exit with jj ( also recommend 'xcape' on linux)
hook global InsertChar j %{ try %{
  exec -draft hH <a-k>jj<ret> d
  exec <esc>
}}

# Spacebar as leader-key
map global normal <space> , -docstring 'leader'

# Select/add next match
define-command -hidden select-or-add-cursor %{
    try %{
        execute-keys "<a-k>\A.\z<ret>"
        execute-keys -save-regs '' "_<a-i>w*"
    } catch %{
        execute-keys -save-regs '' "_*<s-n>"
    } catch nop
}
map global normal v -docstring 'add next match' ":select-or-add-cursor<ret>"

# Remove multi-selection
map global normal V <a-space>   -docstring 'remove main selection'
map global normal <esc> <space> -docstring 'remove all selections except main'

# Clipboard integration
plug "lePerdu/kakboard" %{
    hook global WinCreate .* %{ kakboard-enable }
}

# Use ripgrep instead of grep
set global grepcmd 'rg -n'

# Additional plugins
plug "jjk96/kakoune-fireplace"
plug "delapouite/kakoune-palette"
plug "occivink/kakoune-sudo-write"
plug "listentolist/kakoune-replicate"


################# MODES ##################

# space twice for cmdline
map global user <space> : -docstring 'commander'

# Plugin manager
map global user = -docstring 'plug' ": plug-list<ret>"

# Comment Lines
define-command comment %{
  try %{
    execute-keys _
    comment-block
  } catch comment-line
}
map global user c -docstring 'comment' %{: comment<ret>}

# Navigate buffers
plug "delapouite/kakoune-buffers" %{
    hook global WinDisplay .* info-buffers
        map global user b -docstring 'buffer' ": enter-buffers-mode<ret>"
        alias global bd delete-buffer
        alias global bf buffer-first
        alias global bl buffer-last
        alias global bo buffer-only
        alias global bo! buffer-only-force
}

# development mode (linting and formating)
declare-user-mode dev
  map global user d -docstring 'dev' ": enter-user-mode dev<ret>"
  map global dev l  -docstring 'lint' ": lint<ret>"
  map global dev f  -docstring 'format' ": format<ret>"

# Useful fzf tools or 'skim' in my case
plug "andreyorst/fzf.kak" config %{
  map global user f -docstring 'fzf' ": fzf-mode<ret>"
} defer fzf %{
	set-option global fzf_implementation 'sk' 
  set-option global fzf_highlight_command 'bat'
  # set-option global fzf_file_command 'fd'
}

# LSP-mode
map global user l %{: enter-user-mode lsp<ret>} -docstring "LSP"

# Edit/extend/trim selections one by one
plug "occivink/kakoune-phantom-selection" %{
    declare-user-mode phantom-selection
        map global user p -docstring "phantom"               ": enter-user-mode phantom-selection<ret>"
        map global phantom-selection a -docstring "Add"      ": phantom-selection-add-selection<ret>"
        map global phantom-selection c -docstring "Clear"    ": phantom-selection-select-all; phantom-selection-clear<ret>"
        map global phantom-selection n -docstring "Next"     ": phantom-selection-iterate-next<ret>"
        map global phantom-selection p -docstring "Previous" ": phantom-selection-iterate-prev<ret>"
}

# Select/edit surrounding chars and tags
plug "h-youhei/kakoune-surround"
	declare-user-mode surround
    map global normal <'> ": enter-user-mode surround<ret>" 
		map global surround r -docstring 'replace surround'        ": change-surround<ret>" 
		map global surround d -docstring 'delete surround'         ": delete-surround<ret>" 
		map global surround s -docstring 'select surround'         ": select-surround<ret>" 
		map global surround i -docstring 'surround'                ": surround<ret>" 
		map global surround D -docstring 'delete surrounding tag'  ": delete-surrounding-tag<ret>" 
		map global surround R -docstring 'replace surrounding tag' ": change-surrounding-tag<ret>" 
		map global surround S -docstring 'select surrounding tag'  ": select-surrounding-tag<ret>" 
		map global surround I -docstring 'surround with tag'       ": surround-with-tag<ret>" 

# Spelling and grammar checking
declare-user-mode spell
    map global spell a -docstring 'add' 	": spell-add<ret>"
    map global spell c -docstring 'clear'   ": spell-clear<ret>"
    map global spell e -docstring 'enable'  ": spell-enable<ret>"
    map global spell n -docstring 'next'    ": spell-next<ret>"
    map global spell r -docstring 'replace' ": spell-replace<ret>"
    map global user  S -docstring 'spell' 	": enter-user-mode -lock spell<ret>"
    declare-option str language en-US
    define-command spell-enable %{
        hook window BufWritePost .* %{
            spell %opt{language}
        }
    }

# Tree-sitter
plug "ul/kak-tree" %{
    declare-user-mode tree
        map global user t -docstring 'tree sitter' ": enter-user-mode tree<ret>"
        map global tree c -docstring 'children'    ": tree-select-children<ret>"
        map global tree f -docstring 'first child' ": tree-select-first-child<ret>"
        map global tree n -docstring 'next'        ": tree-select-next-node<ret>"
        map global tree p -docstring 'previous'    ": tree-select-previous-node<ret>"
        map global tree t -docstring 'syntax tree' ": tree-node-sexp<ret>"
        map global tree u -docstring 'parent'      ": tree-select-parent-node<ret>"
        map global tree . -docstring 'lock'        ": enter-user-mode -lock tree<ret>"
}

# Connect kakoune to externals
plug "kakounedotcom/prelude.kak" %{
    plug "kakounedotcom/connect.kak" %{

		# clipboard history
		plug "alexherbo2/yank-ring.kak" %{
			require-module yank-ring
			require-module yank-ring-connect
            yank-ring-enable
            map global user y -docstring 'yank ring' ': yank-ring<ret>' 
        }
    }
}

# (un)Wrap lines
map global user w -docstring 'wrap'   ": add-highlighter global/ wrap -word -indent<ret>"
map global user W -docstring 'unwrap' ": remove-highlighter global/wrap_-word_-indent<ret>"

